# Task ID: 10
# Title: Implement Clean Exit and Memory Management
# Status: pending
# Dependencies: 1, 2, 5, 7
# Priority: medium
# Description: Ensure proper cleanup of all resources when the game exits, either normally or due to errors.
# Details:
1. Implement proper event handling for window close button
2. Add ESC key detection for game exit
3. Create functions to free all allocated memory
4. Implement proper MiniLibX resource cleanup
5. Ensure textures are properly unloaded
6. Add signal handling for unexpected termination
7. Implement a clean exit function that can be called from any point in the program
8. Add memory leak detection during development

# Test Strategy:
Test various exit scenarios including ESC key, window close button, and error conditions. Use memory analysis tools like Valgrind to verify there are no memory leaks or resource leaks upon exit.

# Subtasks:
## 1. Implement Exit Event Handling and Clean Exit Function [pending]
### Dependencies: None
### Description: Create a central exit function and implement handlers for window close button and ESC key to trigger clean program termination.
### Details:
1. Create a `clean_exit` function that takes an exit code parameter and can be called from anywhere in the program.
2. Implement MiniLibX event handling for the window close button (red X) to call the clean_exit function.
3. Add keyboard event handling to detect ESC key press and call clean_exit function.
4. Set up a basic structure for the clean_exit function that will later call memory cleanup functions.
5. Test by verifying the program exits properly when the close button is clicked or ESC is pressed.
6. Ensure the exit code is properly passed to the system.

## 2. Implement Resource Cleanup Functions [pending]
### Dependencies: 10.1
### Description: Create functions to properly free all allocated resources including MiniLibX resources and loaded textures.
### Details:
1. Create a function to free all MiniLibX resources (windows, images).
2. Implement a function to unload and free all loaded textures.
3. Add a function to free any other game-specific allocated memory (map data, sprites, etc.).
4. Update the clean_exit function to call these cleanup functions in the correct order.
5. Test by ensuring no resources remain allocated after exit.
6. Add debug outputs during cleanup to verify each resource is being freed properly during development.

## 3. Implement Signal Handling and Memory Leak Detection [pending]
### Dependencies: 10.1, 10.2
### Description: Add signal handlers for unexpected termination and implement memory leak detection for development.
### Details:
1. Implement signal handlers for common signals (SIGINT, SIGSEGV, etc.) to call the clean_exit function.
2. Add conditional compilation for development mode that includes memory tracking.
3. Create a memory tracking system that logs allocations and deallocations during development.
4. Implement a function to report any memory leaks when the program exits in development mode.
5. Add a debug flag to enable/disable detailed memory reporting.
6. Test by intentionally triggering signals and checking that resources are properly cleaned up.
7. Verify memory leak detection by intentionally leaking memory and confirming the system detects it.

